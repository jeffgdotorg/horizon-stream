<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0"
    xsi:schemaLocation="
        http://www.osgi.org/xmlns/blueprint/v1.0.0
        https://osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
        http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0
        http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.3.0.xsd
    ">

    <cm:property-placeholder id="serverProperties" persistent-id="org.opennms.core.ipc.grpc.client" update-strategy="reload">
        <cm:default-properties>
            <cm:property name="grpc.tls.enabled" value="false"/>

            <cm:property name="grpc.client.cert.filepath" value="certs/client.signed.cert"/>
            <cm:property name="grpc.client.private.key.filepath" value="certs/client.key"/>
            <cm:property name="grpc.client.private.key.password" value=""/>
            <cm:property name="grpc.client.private.key.is-pkcs12" value="false"/>
            <cm:property name="grpc.trust.cert.filepath" value="certs/CA.cert"/>
            <cm:property name="grpc.override.authority" value="opennms-minion-ssl-gateway"/>
            <cm:property name="grpc.max.message.size" value="104857600"/>

            <cm:property name="grpc.host" value="localhost"/>
            <cm:property name="grpc.port" value="8990"/>

            <cm:property name="sendQueue.memory" value="4096"/> <!-- 4K Elements -->
            <cm:property name="sendQueue.offHeap" value="4194304"/> <!-- 4M Elements -->
        </cm:default-properties>
    </cm:property-placeholder>

    <cm:property-placeholder id="identityProperties" persistent-id="org.opennms.identity" update-strategy="reload"
        placeholder-prefix="$[" placeholder-suffix="]">
        <cm:default-properties>
            <cm:property name="id" value="UNKNOWN"/>
            <cm:property name="location" value="Default"/>
        </cm:default-properties>
    </cm:property-placeholder>

    <reference id="certificatePackageBootstrapImpl" interface="org.opennms.horizon.minion.bootstrap.CertificatePackageBootstrap" />


    <bean id="ipcIdentity" class="org.opennms.horizon.minion.grpc.MinionIpcIdentity">
        <argument value="$[id]" />
        <argument value="$[location]" />
    </bean>

    <reference id="configAdmin" interface="org.osgi.service.cm.ConfigurationAdmin"/>
    <service interface="org.opennms.horizon.shared.ipc.rpc.IpcIdentity" ref="ipcIdentity" />

    <bean id="metricRegistry" class="com.codahale.metrics.MetricRegistry"/>
    <bean id="tracer" class="io.opentracing.noop.NoopTracerFactory" factory-method="create"/>

    <bean id="thinRpcRequestHandler" class="org.opennms.horizon.minion.grpc.rpc.ThinRpcRequestHandler">
        <argument ref="ipcIdentity" />
    </bean>

    <bean id="minionGrpcSslContextBuilderFactory" class="org.opennms.horizon.minion.grpc.ssl.MinionGrpcSslContextBuilderFactoryImpl">
        <property name="clientCertChainFilePath" value="${grpc.client.cert.filepath}"/>
        <property name="clientPrivateKeyFilePath" value="${grpc.client.private.key.filepath}"/>
        <property name="clientPrivateKeyPassword" value="${grpc.client.private.key.password}"/>
        <property name="clientPrivateKeyIsPkcs12" value="${grpc.client.private.key.is-pkcs12}"/>
        <property name="trustCertCollectionFilePath" value="${grpc.trust.cert.filepath}"/>
    </bean>

     <bean id="sendQueue" class="org.opennms.horizon.minion.grpc.queue.OffHeapSendQueueFactory" destroy-method="close">
         <argument value="${sendQueue.memory}"/>
         <argument value="${sendQueue.offHeap}"/>
     </bean>
    
    <!-- Depends on the bootstrap process which extracts the Certificate ZIP file, if one is present -->
    <bean
        id="minionClient"
        class="org.opennms.horizon.minion.grpc.MinionGrpcClient"
        init-method="start"
        destroy-method="shutdown"
        depends-on="certificatePackageBootstrapImpl"
    >
        <argument ref="ipcIdentity"/>

        <argument ref="metricRegistry"/>
        <argument ref="tracer"/>
        <argument ref="sendQueue"/>
        <argument ref="minionGrpcSslContextBuilderFactory"/>

        <property name="cloudMessageHandler" ref="cloudMessageHandler" />
        <property name="rpcRequestHandler" ref="thinRpcRequestHandler" />

        <property name="grpcHost" value="${grpc.host}"/>
        <property name="grpcPort" value="${grpc.port}"/>
        <property name="tlsEnabled" value="${grpc.tls.enabled}"/>
        <property name="maxInboundMessageSize" value="${grpc.max.message.size}"/>
        <property name="overrideAuthority" value="${grpc.override.authority}"/>
    </bean>

    <reference-list interface="org.opennms.horizon.shared.ipc.rpc.api.minion.RpcHandler" availability="optional">
        <reference-listener ref="thinRpcRequestHandler" bind-method="bind" unbind-method="unbind" />
    </reference-list>

    <service ref="minionClient">
        <interfaces>
            <value>org.opennms.horizon.minion.grpc.MinionGrpcClient</value>
            <value>org.opennms.horizon.shared.ipc.sink.api.MessageDispatcherFactory</value>
            <value>org.opennms.horizon.shared.ipc.rpc.api.minion.ClientRequestDispatcher</value>
        </interfaces>
    </service>

    <bean id="cloudMessageHandler" class="org.opennms.horizon.minion.grpc.client.message.ThinCloudMessageHandler" />
    <reference-list id="cloudMessageReceivers" interface="org.opennms.horizon.shared.ipc.rpc.api.minion.CloudMessageReceiver" availability="optional">
        <reference-listener ref="cloudMessageHandler" bind-method="bind" unbind-method="unbind" />
    </reference-list>

</blueprint>
